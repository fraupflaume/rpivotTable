(function() {
  var e;
  (e = function(e) {
    return "object" == typeof exports && "object" == typeof module ? e(require("jquery")) : "function" == typeof define && define.amd ? define(["jquery"], e) : e(jQuery)
  })(function(e) {
    var t, i, r, l, a;
    return l = e.pivotUtilities.numberFormat, a = e.pivotUtilities.aggregatorTemplates, t = l({
      thousandsSep: " ",
      decimalSep: ","
    }), i = l({
      digitsAfterDecimal: 0,
      thousandsSep: " ",
      decimalSep: ","
    }), r = l({
      digitsAfterDecimal: 1,
      scaler: 100,
      suffix: "%",
      thousandsSep: " ",
      decimalSep: ","
    }), e.pivotUtilities.locales.gr = {
      localeStrings: {
        renderError: "Παρουσιάστηκε σφάλμα κατά την εμφάνιση του συγκεντρωτικού πίνακα.",
        computeError: "Παρουσιάστηκε σφάλμα κατά τον υπολογισμό του συγκεντρωτικού πίνακα.",
        uiRenderError: "Παρουσιάστηκε σφάλμα στην επιφάνεια απόδοσης του συγκεντρωτικού πίνακα.",
        selectAll: "Επιλογή όλων",
        selectNone: "επιλέξτε τίποτα",
        tooMany: "(πάρα πολλά για λίστα)",
        filterResults: "Φιλτράρισμα αποτελεσμάτων",
        totals: "Totals",
        vs: "vs",
        by: "by"
      },
      aggregators: {
        Count: a.count(i),
        "Count Unique Values": a.countUnique(i),
        "Unique Values List": a.listUnique(", "),
        Sum: a.sum(t),
        "Integer Sum": a.sum(i),
        Average: a.average(t),
        Median: a.median(t),
        "Sample Variance": a["var"](1, t),
        "Sample Standard Deviation": a.stdev(1, t),
        Minimum: a.min(t),
        Maximum: a.max(t),
        First: a.first(t),
        Last: a.last(t),
        "Sum over Sum": a.sumOverSum(t),
        "80% Upper Bound": a.sumOverSumBound80(!0, t),
        "80% Lower Bound": a.sumOverSumBound80(!1, t),
        "Sum as Fraction of Total": a.fractionOf(a.sum(), "total", r),
        "Sum as Fraction of Rows": a.fractionOf(a.sum(), "row", r),
        "Sum as Fraction of Columns": a.fractionOf(a.sum(), "col", r),
        "Count as Fraction of Total": a.fractionOf(a.count(), "total", r),
        "Count as Fraction of Rows": a.fractionOf(a.count(), "row", r),
        "Count as Fraction of Columns": a.fractionOf(a.count(), "col", r)
      },
      renderers: {
        Table: e.pivotUtilities.renderers.Table,
        "Table Bar Chart": e.pivotUtilities.renderers["Table Barchart"],
        Heatmap: e.pivotUtilities.renderers.Heatmap,
        "Heatmap by Rows": e.pivotUtilities.renderers["Row Heatmap"],
        "Heatmap by Columns": e.pivotUtilities.renderers["Col Heatmap"] //,
      }
    }
  })
}).call(this);
//# sourceMappingURL=pivot.gr.min.js.map
